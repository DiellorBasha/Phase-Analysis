

function [Events] = PhaseLock (Signal, Event, Codes, SignalFs, Start) 

Signal = Signal((~isnan(Signal)));
Time = 1/SignalFs:1/SignalFs:length(Signal)/SignalFs; 

SignalH = hilbert (Signal); % hilbert transform EEG
SignalPhase = angle (SignalH);  % get phase

Event(:,1) = Event(:,1)-Start; 
Event(:,1) = round (Event(:,1), 3); %round spike time to 3 decimals, millisecond precision

disp ('Calculating phase...')
sz = size(Event, 2); 
for k = 1:sz
Event(any(isnan(Event), k), :) = [];
end % remove NaNs
 Time = round (Time, 3);

% check if sampling rates are equal, if not interpolate by ratio
% SignalFs/EventFs

% if(SignalFs ~= EventFs)
%     TimeInterp = 0:1/EventFs:length(Signal)/SignalFs; 
%     TimeInterp = TimeInterp(2:end); 
% vq1 = interp1(Time,SignalPhase,TimeInterp, 'linear');
%     SignalPhase = vq1.'; 
%     Time = TimeInterp.';
%     Time = round (Time, 3);
% end

idx = zeros(1,length(Event));
for k=1:length(Event)
idx(k) = find(Event(k,1)==Time);
end

 j = length(unique(Codes));
 codes{7,j}=[];
 for m = 1:j
        try
codes{1,m} = find(Codes==m);
codes{2,m} = idx(codes{1,m});
codes{3,m} = ones(length(codes{1,m})); 
codes{4,m} = SignalPhase(codes{2,m}); 
codes{5,m} = circ_mean(codes{4,m});
codes{6,m} = circ_r(codes{4,m});
codes{7,m} = circ_rtest(codes{4,m});
        catch
        end
 end

Events.Phases.MU = SignalPhase(idx); 
Events.Times.MU = Event;
Events.Circular_Mean.MU = circ_mean(Events.Phases.MU);
Events.Circular_Vector.MU = circ_r(Events.Phases.MU);
Events.Rayleigh_Test.MU = circ_rtest(Events.Phases.MU);

edges = linspace(-pi,pi,36);
for k = 1:size(codes,2) 
Events(k).Times.SU = Time(codes{2,k}); 
Events(k).Phases.SU = codes{4,k};
Events(k).Circular_Mean.SU = codes{5,k};
Events(k).Circular_Vector.SU = codes{6,k};
Events(k).Rayleigh_Test.SU = codes{7,k};
Events(k).Binned_Phases.SU = histcounts(Events(k).Phases.SU,edges);
end

figure('Name', 'Hippocampal spikes v EEG phase')
clf
sDist = rad2deg(vertcat (codes{4,1:end})); 
nBins=90;
PlotHistogramStats

%Plot tuning curves for each spike
edges = linspace(-pi,pi,36);
edges = edges(1:end-1)+pi/2; 

counts = zeros (size (Events,2),35);
for k = 1:size (Events,2)
    counts(k,:) = Events(k).Binned_Phases.SU;
end
figure ('Name', 'Hipp spike tuning curves')
PlotTuningCurves(edges,counts,Hipp)
end



